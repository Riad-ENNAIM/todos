{"version":3,"sources":["reducers/todos.js","reducers/filter.js","actions/filterTypes.js","reducers/index.js","components/Button.js","containers/FilterButton.js","actions/index.js","components/Filters.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/FiltredTodoList.js","components/Home.js","components/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["todos","state","action","type","lastId","JSON","parse","localStorage","getItem","id","newList","userId","title","completed","setItem","stringify","todoList","map","todo","deleteResult","filter","todoListString","searchResult","toLowerCase","indexOf","value","combineReducers","Button","active","children","onClick","disabled","connect","props","dispatch","Filters","FilterButton","input","onSubmit","e","preventDefault","trim","ref","node","Todo","onToggleTodo","onDeleteTodo","style","display","color","checked","onChange","textDecoration","TodoList","toggleTodo","deleteTodo","reverseAllTodos","searchTodo","placeholder","target","index","key","getFiltredTodos","console","log","Home","padding","FiltredTodoList","PageNotFound","src","width","height","alt","App","exact","path","component","Boolean","window","location","hostname","match","store","createStore","rootReducer","applyMiddleware","thunk","dispactch","axios","get","then","res","data","slice","reverse","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a139d12.chunk.js","sourcesContent":["const todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'GET_TODOS':\r\n      return action.todos\r\n    case 'ADD_TODO':\r\n      const lastId = JSON.parse(localStorage.getItem('allTodos'))[0].id\r\n      const newList = [\r\n        {\r\n          userId: 1,\r\n          id: lastId + 1,\r\n          title: action.title,\r\n          completed: false\r\n        },\r\n        ...state\r\n      ]\r\n      localStorage.setItem('allTodos', JSON.stringify(newList))\r\n      return newList\r\n    case 'TOGGLE_TODO':\r\n      const todoList = state.map(todo =>\r\n                      (todo.id === action.id)\r\n                        ? {...todo, completed: !todo.completed}\r\n                        : todo\r\n                    )\r\n      localStorage.setItem('allTodos', JSON.stringify(todoList))\r\n      return todoList\r\n    case 'DELETE_TODO':\r\n      const deleteResult = state.filter(todo => todo.id !== action.id)\r\n      localStorage.setItem('allTodos', JSON.stringify(deleteResult))\r\n      return deleteResult\r\n    case 'REVERSE_ALL_TODOS':\r\n      return state.map(todo => ({...todo, completed: !todo.completed}))\r\n    case 'SEARCH_TODO':\r\n      const todoListString = localStorage.getItem('allTodos')\r\n      const searchResult = JSON.parse(todoListString)\r\n      return searchResult.filter(todo => todo.title.toLowerCase().indexOf(action.value.toLowerCase()) !== -1)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default todos\r\n","import { SHOW_ALL } from '../actions/filterTypes'\r\n\r\nconst filter = (state = SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case 'SET_FILTER':\r\n      return action.filter\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default filter\r\n","export const SHOW_ALL = 'SHOW_ALL'\r\nexport const SHOW_COMPLETED = 'SHOW_COMPLETED'\r\nexport const SHOW_ACTIVE = 'SHOW_ACTIVE'","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport filter from './filter'\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  filter\r\n})\r\n","import React from 'react'\r\n\r\nconst Button = ({ active, children, onClick }) => (\r\n  <button onClick={onClick} disabled={active}>\r\n    {children}\r\n  </button>\r\n)\r\n\r\nexport default Button\r\n","import { connect } from 'react-redux'\r\nimport { setFilter } from '../actions'\r\nimport Button from '../components/Button'\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  active: props.filter === state.filter\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, props) => ({\r\n  onClick: () => dispatch(setFilter(props.filter))\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Button)\r\n","import axios from 'axios'\r\n\r\nexport const getTodos = () => dispactch => {\r\n  axios.get('https://jsonplaceholder.typicode.com/todos/')\r\n      .then(res => {\r\n        const todos = res.data.slice(0, 30).reverse()\r\n        localStorage.setItem('allTodos', JSON.stringify(todos))\r\n        dispactch({\r\n          type:'GET_TODOS',\r\n          todos\r\n        })\r\n      })\r\n}\r\n\r\nexport const addTodo = title => ({\r\n  type: 'ADD_TODO',\r\n  title\r\n})\r\n\r\n\r\nexport const setFilter = filter => ({\r\n  type: 'SET_FILTER',\r\n  filter\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n  type: 'TOGGLE_TODO',\r\n  id\r\n})\r\n\r\nexport const deleteTodo = id => ({\r\n  type: 'DELETE_TODO',\r\n  id\r\n})\r\n\r\nexport const reverseAllTodos = id => ({\r\n  type: 'REVERSE_ALL_TODOS',\r\n})\r\n\r\nexport const searchTodo = value => ({\r\n  type: 'SEARCH_TODO',\r\n  value\r\n})\r\n","import React from 'react'\r\nimport FilterButton from '../containers/FilterButton'\r\nimport { SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED } from '../actions/filterTypes'\r\n\r\nconst Filters = () => (\r\n  <div>\r\n    <span>Filter: </span>\r\n    <FilterButton filter={SHOW_ALL}>\r\n      All\r\n    </FilterButton>\r\n    <FilterButton filter={SHOW_ACTIVE}>\r\n      Active\r\n    </FilterButton>\r\n    <FilterButton filter={SHOW_COMPLETED}>\r\n      Completed\r\n    </FilterButton>\r\n  </div>\r\n)\r\n\r\nexport default Filters\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addTodo } from '../actions'\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n  let input\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={e => {\r\n        e.preventDefault()\r\n        if (input.value.trim()) {\r\n          dispatch(addTodo(input.value))\r\n          input.value = ''\r\n        }\r\n        \r\n      }}>\r\n        <input ref={node => input = node} />\r\n        <button type=\"submit\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect()(AddTodo)\r\n","import React from 'react'\r\n\r\nconst Todo = ({ onToggleTodo, onDeleteTodo, completed, title, id }) => (\r\n  <div>\r\n    <div onClick={onDeleteTodo} style={{ display: 'inline', color: 'red' }}>&#10006;</div>\r\n    <input type=\"checkbox\" checked={completed} onChange={onToggleTodo}/>\r\n    <p style={{ textDecoration: completed ? 'line-through' : 'none', display: 'inline' }}>\r\n      {id} - {title}\r\n    </p>\r\n  </div>\r\n)\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, toggleTodo, deleteTodo, reverseAllTodos, searchTodo }) => (\r\n  <div>\r\n    <span>Search: </span>\r\n    <input type=\"text\" placeholder=\"Search..\" onChange={(e) => searchTodo(e.target.value)} />\r\n    <div>\r\n      {todos.map((todo, index) =>\r\n        <Todo\r\n          key={index}\r\n          {...todo}\r\n          onToggleTodo={() => toggleTodo(todo.id)}\r\n          onDeleteTodo={() => deleteTodo(todo.id)}\r\n        />\r\n      )}\r\n    </div>\r\n    <button onClick={() => reverseAllTodos()}>Reverse All</button>\r\n  </div>\r\n)\r\n\r\nexport default TodoList\r\n","import { connect } from 'react-redux'\r\nimport { toggleTodo, deleteTodo, reverseAllTodos, searchTodo } from '../actions'\r\nimport TodoList from '../components/TodoList'\r\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../actions/filterTypes'\r\n\r\nconst getFiltredTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case SHOW_ALL:\r\n      return todos\r\n    case SHOW_COMPLETED:\r\n      return todos.filter(todo => todo.completed)\r\n    case SHOW_ACTIVE:\r\n      return todos.filter(todo => !todo.completed)\r\n    default:\r\n      console.log('Error')\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  todos: getFiltredTodos(state.todos, state.filter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleTodo: id => dispatch(toggleTodo(id)),\r\n  deleteTodo: id => dispatch(deleteTodo(id)),\r\n  reverseAllTodos: () => dispatch(reverseAllTodos()),\r\n  searchTodo: value => dispatch(searchTodo(value))\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList)\r\n","import React from 'react'\r\nimport Filters from './Filters'\r\nimport AddTodo from '../containers/AddTodo'\r\nimport FiltredTodoList from '../containers/FiltredTodoList'\r\n\r\nconst Home = () => (\r\n  <div style={{ padding: '2% 10% 2% 10%' }}>\r\n    <AddTodo />\r\n    <Filters />\r\n    <FiltredTodoList />\r\n  </div>\r\n)\r\n\r\nexport default Home","import React from 'react'\r\n\r\nconst PageNotFound = () => (\r\n  <img src='https://freefrontend.com/assets/img/html-funny-404-pages/HTML-404-Crying-Baby-Page.png'\r\n      width='100%'\r\n      height='auto'\r\n      alt='Page Not Found'\r\n  />\r\n)\r\n\r\nexport default PageNotFound","import React from 'react'\nimport Home from './components/Home'\nimport PageNotFound from './components/PageNotFound'\nimport { Route, Switch } from 'react-router-dom'\n\nconst App = () => (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route component={PageNotFound} />\n    </Switch>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\nimport { getTodos } from './actions/index'\nimport thunk from 'redux-thunk'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\nstore.dispatch(getTodos())\n\nReactDOM.render(\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n  )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}